@functions{
    private static string WargamingAPIGetMaps = 
"https://api.worldoftanks.eu/wot/globalwar/provinces/?application_id=a1dfd7ca8e1527cfbcd2d2cae3c21072&map_id=1";

    private static string WargamingAPIGetClans = 
"https://api.worldoftanks.eu/wot/clan/info/?application_id=a1dfd7ca8e1527cfbcd2d2cae3c21072&fields=abbreviation,clan_id,color,name&clan_id=";

    public class ProvinceList
    {
        public string status;
        public int count;
        public Dictionary<string, Province> data = new Dictionary<string, Province>();
    }
    
    public class Province
    {
        public string status { get; set; }
        public List<string> neighbors { get; set; }
        public string province_i18n { get; set; }
        public int revenue { get; set; }
        public int vehicle_max_level { get; set; }
        public string arena { get; set; }
        public Dictionary<string, Region> regions { get; set; }
        public int? clan_id { get; set; }
        public Clan clan { get; set; }
        public string primary_region { get; set; }
        public string province_id { get; set; }
        public int prime_time { get; set; }
        public string display_time { get { return (prime_time+1).ToString()+":00"; }}
    }

    public class Region
    {
        public string region_i18n { get; set; }
        public string region_id { get; set; }
    }

    public class ClanList
    {
        public string status;
        public int count;
        public Dictionary<string, Clan> data = new Dictionary<string, Clan>();
    }

    public class Clan
    {
        public string color { get; set; }
        public string abbreviation { get; set; }
        public int clan_id { get; set; }
        public string name { get; set; }

        public Clan()
        {
            color = "#000000";
            abbreviation = "NPC";
            clan_id = 0;
            name = "Civilian";
        }
    }

    string jsonText1 = "";
    string jsonText2 = "";
    string missingClans = "";

    public ProvinceList GetProvinceList()
    {
        System.Net.WebClient webClient = new System.Net.WebClient();
        jsonText1 = webClient.DownloadString(WargamingAPIGetMaps);

        var list = Json.Decode<ProvinceList>(jsonText1);
        ProvinceList newList = new ProvinceList();

        var clanIDs = new HashSet<int>();

        foreach(var province in list.data)
        {
           if (!Request.QueryString["goldvalue"].IsEmpty() && province.Value.revenue < Request.QueryString["goldvalue"].AsInt()) {continue;}
           if (!Request.QueryString["starttime"].IsEmpty() && province.Value.prime_time < Request.QueryString["starttime"].AsInt()) {continue;}
           if (!Request.QueryString["maxTier"].IsEmpty() && province.Value.vehicle_max_level > Request.QueryString["maxTier"].AsInt()) {continue;}
           if (!Request.QueryString["provinceStatus"].IsEmpty() && !Request.QueryString["provinceStatus"].Split(',').Contains(province.Value.status)) {continue;}
           if (MapBanned(province.Value.arena)) {continue;}

           byte[] bytes = System.Text.Encoding.Default.GetBytes(province.Value.province_i18n);
           province.Value.province_i18n = System.Text.Encoding.UTF8.GetString(bytes);

           province.Value.arena = GetMapName(province.Value.arena);
           
           if (province.Value.clan_id.HasValue && clanIDs.Count < 100)
           {
                clanIDs.Add(province.Value.clan_id.Value);
           }

           newList.data.Add(province.Key, province.Value);
        }

        string clanIDList = string.Join<int>(",", clanIDs);

        jsonText2 = webClient.DownloadString(WargamingAPIGetClans + clanIDList);

        ClanList clanList = Json.Decode<ClanList>(jsonText2);

        foreach( var province in newList.data.Values)
        {
            if (province.clan_id.HasValue && clanList.data.ContainsKey(province.clan_id.Value.ToString()))
            {
                province.clan = clanList.data[province.clan_id.Value.ToString()];
            }
            else
            {
                missingClans += province.clan_id.HasValue ? province.clan_id.Value.ToString() : "dunno";
                missingClans += ", ";
                province.clan = new Clan();
            }
        }

        return newList;
    }

    static Dictionary<string,string> MapTranslate = new Dictionary<string,string>()
    {
        {"01_karelia","Karelia"},
        {"02_malinovka","Malinovka"},
        {"03_campania","Province"},
        {"04_himmelsdorf","Himmelsdorf"},
        {"05_prohorovka","Prohorovka"},
        {"06_ensk","Ensk"},
        {"07_lakeville","Lakeville"},
        {"08_ruinberg","Ruinberg"},
        {"10_hills","Mines"},
        {"11_murovanka","Murovanka"},
        {"13_erlenberg","Erlenberg"},
        {"14_siegfried_line","Siegfried Line"},
        {"Komarin","Komarin"},
        {"17_munchen","Widepark"},
        {"18_cliff","Cliff"},
        {"19_monastery","Abbey"},
        {"22_slough","Swamp"},
        {"23_westfeld","Westfield"},
        {"28_desert","Sand River"},
        {"29_el_hallouf","El Halluf"},
        {"31_airfield","Airfield"},
        {"33_fjord","Fjords"},
        {"34_redshire","Redshire"},
        {"35_steppes","Steppes"},
        {"36_fishing_bay","Fisherman's Bay"},
        {"37_caucasus","Mountain Pass"},
        {"38_mannerheim_line","Arctic Region"},
        {"39_crimea","South Coast"},
        {"42_north_america","Port"},
        {"44_north_america","Live Oaks"},
        {"45_north_america","Highway"},
        {"47_canada_a","Serene Coast"},
        {"51_asia","Dragon Ridge"},
        {"53_japan","Hidden Village"},
        {"60_asia_miao","Pearl River"},
        {"73_asia_korea","Sacred Valley"},
        {"85_winter","Severogorsk"},
        {"86_himmelsdorf_winter","Himmelsdorf Winter"}
    };

    public static string GetMapName(string serverName)
    {
        if (MapTranslate.ContainsKey(serverName))
        {
            return MapTranslate[serverName];
        }
        return serverName;
    }

    public static Dictionary<int, string> GetClanNames(ProvinceList provinces)
    {
        return new Dictionary<int, string>();
    }

    public bool StatusSelected(string status)
    {
       if (Request.QueryString["provinceStatus"].IsEmpty()) return false;
       return Request.QueryString["provinceStatus"].Split(',').Contains(status);
    }

    public bool MapBanned(string map)
    {
       if (Request.QueryString["mapRestrict"].IsEmpty()) return false;
       return Request.QueryString["mapRestrict"].Split(',').Contains(map);
    }
}

@{
    ProvinceList provinceList;
    if (Request.QueryString.Count > 0)
    {
       provinceList = GetProvinceList();
    }
    else
    {
        provinceList = new ProvinceList();
    }

    int count = 0;

    if (IsPost)
    {
        count++;
    }
}


<!DOCTYPE html>

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Province Target</title>
        <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    </head>
    <body>
        <form method="get">
        <table style="width:800px">
            <tr><td>
        
            <div>
                Start Time: 
                <select name="starttime">
                    @{
                        for (int i=16; i<20;++i)
                        {
                            if (@Request.QueryString["starttime"].AsInt() == i)
                            {
                                <option value=@i selected>@i+</option>
                            }
                            else
                            {
                                <option value=@i>@i+</option>
                            }
                        }
                    }
                </select>
                <p>
                Max Tier: 
                <select name="maxTier">
                    @{
                        for (int i=10; i>5;i-=2)
                        {
                            if (@Request.QueryString["maxTier"].AsInt() == i)
                            {
                                <option value=@i selected>@i</option>
                            }
                            else
                            {
                                <option value=@i>@i</option>
                            }
                        }
                    }
                </select>
                <p>
                Minimum Gold Value: 
                <input name="goldvalue" value="@Request.QueryString["goldvalue"]"></input>
                <p>
                Province Status: <br>
                @Html.CheckBox("provinceStatus", StatusSelected("start"), new Dictionary<string, object>{{"value", "start"}}) Landing <br>
                @Html.CheckBox("provinceStatus", StatusSelected("mutiny"), new Dictionary<string, object>{{"value", "mutiny"}}) Revolt <br>
                @Html.CheckBox("provinceStatus", StatusSelected("delayed_mutiny"), new Dictionary<string, object>{{"value", "delayed_mutiny"}}) Delayed Revolt <p>
                    
                <input type="submit" value="Submit" /></p>
            </div></td>
                
            <td>
                Banned Maps: <br>
                @{
                    int j = 0;
                    foreach (var map in MapTranslate)
                    {
                        ++j;
                        if (j>12)
                        {
                            j=0; 
                            @Html.CheckBox("mapRestrict",MapBanned(map.Key), new Dictionary<string, object>{{"value", map.Key}}) @map.Value @Html.Raw("<br></td><td>")
                        }
                        else
                        {
                            @Html.CheckBox("mapRestrict",MapBanned(map.Key), new Dictionary<string, object>{{"value", map.Key}}) @map.Value <br>
                        }
                    }
                }
            </td>
            </tr>
        </table>
            </form>
        <table style="width:800px;text-align:center">
            <tr>
              <th>Name</th>
              <th>Map</th> 
              <th>Start Time</th>
              <th>Max Tier</th>
              <th>Gold Value</th>
              <th>Current Holder</th>
              <th>Status</th>
            </tr>
                @{
                    foreach (var province in provinceList.data.Values)
                    {
                    <tr>
                      <td><a href="http://worldoftanks.eu/clanwars/maps/globalmap/?province=@province.province_id" target="_blank">@province.province_i18n</a></td>
                      <td>@province.arena</td> 
                      <td>@province.display_time</td>
                      <td>@province.vehicle_max_level</td>
                      <td>@province.revenue</td>
                        @if (province.clan_id == null)
                        {
                            <td style="color: @province.clan.color">@province.clan.abbreviation</td>
                        }
                        else
                        {
                            <td><a href="http://wotcs.com/clan.php?wid=@province.clan_id" target="_blank" style="color: @province.clan.color">@province.clan.abbreviation</a></td>
                        }
                      <td>@province.status</td>
                    </tr>
                    }
                }
        </table>
    </body>
</html>
